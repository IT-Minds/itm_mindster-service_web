/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.7.0 (NJsonSchema v10.3.9.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AuthBase {
  private accessToken: string;
  constructor(accessToken: string) {
    this.accessToken = accessToken;
  }

  transformHttpRequestOptions(options: RequestInit): Promise<RequestInit> {
    if (options.headers && this.accessToken) {
      (<Record<string, string>>options.headers).Authorization =
        "Bearer " + this.accessToken;
      return Promise.resolve(options);
    }
    return Promise.resolve(options);
  }
}

export class ClientBase {
  constructor(private AuthBase: AuthBase) {}

  private cacheableResponse = false;
  private cacheStrategy: "CacheFirst" | "NetworkFirst" = "NetworkFirst";
  private cacheAllowStatuses: number[] = [200];
  private cacheableOptions: RequestInit = null;

  setCacheableResponse(
    cacheStrategy: ClientBase["cacheStrategy"] = "NetworkFirst",
    cacheAllowStatuses: ClientBase["cacheAllowStatuses"] = [200]
  ) {
    this.cacheableResponse = true;
    this.cacheStrategy = cacheStrategy;
    this.cacheAllowStatuses = cacheAllowStatuses;
  }

  async transformOptions(options: RequestInit): Promise<RequestInit> {
    const result = await (this.AuthBase
      ? this.AuthBase.transformHttpRequestOptions(options)
      : Promise.resolve(options));

    if (this.cacheableResponse) {
      this.cacheableOptions = result;
    }

    return result;
  }

  private async cacheResponse(
    request: Request,
    response: Response
  ): Promise<Response> {
    const cache = await caches.open("nswagts.v1");
    const cloned = response.clone();
    await cache.put(request, response);

    return cloned;
  }

  async transformResult(
    url: string,
    networkResponse: Response,
    cb: (response: Response) => any
  ) {
    let response: Response = networkResponse;
    if (process.browser && this.cacheableResponse) {
      console.debug("NswagTs transformResult cacheableResponse executing...");
      const request = new Request(url, this.cacheableOptions);

      const cacheResponse = await caches.match(request);

      const networkOk = this.cacheAllowStatuses.includes(
        networkResponse?.status ?? 0
      );
      const cacheOk = this.cacheAllowStatuses.includes(
        cacheResponse?.status ?? 0
      );

      if (this.cacheStrategy === "CacheFirst") {
        if (cacheOk) {
          console.debug(
            "NswagTs transformResult cacheableResponse cache first using cache",
            cacheResponse
          );
          response = cacheResponse;
        } else {
          console.debug(
            "NswagTs transformResult cacheableResponse cache first using network",
            networkResponse
          );
          response = networkOk
            ? await this.cacheResponse(request, networkResponse)
            : networkResponse;
        }
      } else if (this.cacheStrategy === "NetworkFirst") {
        if (networkOk) {
          console.debug(
            "NswagTs transformResult cacheableResponse network first using network ok",
            networkResponse
          );
          response = await this.cacheResponse(request, networkResponse);
        } else if (cacheOk) {
          console.debug(
            "NswagTs transformResult cacheableResponse network first using cache",
            cacheResponse
          );
          response = cacheResponse;
        } else {
          console.debug(
            "NswagTs transformResult cacheableResponse network first using network failure",
            networkResponse
          );
          response = networkResponse;
        }
      }
    }
    this.cacheableResponse = false;
    return cb(response);
  }
}

export interface IApplicationClient {
    createApplication(command: CreateApplicationCommand): Promise<string>;
    getAllApplications(): Promise<ApplicationIdDto[]>;
    updateApplication(id: number, command: UpdateApplicationCommand): Promise<FileResponse>;
    createAppToken(id: number, command: CreateAppTokenCommand): Promise<number>;
    createAppTokenActions(tokenId: number, command: CreateAppTokenActionsCommand): Promise<number>;
    getAllAppTokens(): Promise<AppTokenIdDto[]>;
    createAuthAppToken(aid: string | null, command: CreateAuthAppTokenCommand, xToken?: string | null | undefined): Promise<TokenOutput>;
    updateAppTokenActions(id: number, command: UpdateAppTokenCommand): Promise<FileResponse>;
}

export class ApplicationClient extends ClientBase implements IApplicationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: AuthBase, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createApplication(command: CreateApplicationCommand): Promise<string> {
        let url_ = this.baseUrl + "/api/Application";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateApplication(_response));
        });
    }

    protected processCreateApplication(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    getAllApplications(): Promise<ApplicationIdDto[]> {
        let url_ = this.baseUrl + "/api/Application";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAllApplications(_response));
        });
    }

    protected processGetAllApplications(response: Response): Promise<ApplicationIdDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ApplicationIdDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ApplicationIdDto[]>(<any>null);
    }

    updateApplication(id: number, command: UpdateApplicationCommand): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Application/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateApplication(_response));
        });
    }

    protected processUpdateApplication(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    createAppToken(id: number, command: CreateAppTokenCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Application/{id}/AppTokens";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateAppToken(_response));
        });
    }

    protected processCreateAppToken(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    createAppTokenActions(tokenId: number, command: CreateAppTokenActionsCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Application/AppTokens/{tokenId}/AppTokenActions";
        if (tokenId === undefined || tokenId === null)
            throw new Error("The parameter 'tokenId' must be defined.");
        url_ = url_.replace("{tokenId}", encodeURIComponent("" + tokenId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateAppTokenActions(_response));
        });
    }

    protected processCreateAppTokenActions(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    getAllAppTokens(): Promise<AppTokenIdDto[]> {
        let url_ = this.baseUrl + "/api/Application/AppTokens";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAllAppTokens(_response));
        });
    }

    protected processGetAllAppTokens(response: Response): Promise<AppTokenIdDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AppTokenIdDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AppTokenIdDto[]>(<any>null);
    }

    createAuthAppToken(aid: string | null, command: CreateAuthAppTokenCommand, xToken?: string | null | undefined): Promise<TokenOutput> {
        let url_ = this.baseUrl + "/api/Application/AuthJWT/{aid}/token";
        if (aid === undefined || aid === null)
            throw new Error("The parameter 'aid' must be defined.");
        url_ = url_.replace("{aid}", encodeURIComponent("" + aid));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "xToken": xToken !== undefined && xToken !== null ? "" + xToken : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateAuthAppToken(_response));
        });
    }

    protected processCreateAuthAppToken(response: Response): Promise<TokenOutput> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenOutput.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TokenOutput>(<any>null);
    }

    updateAppTokenActions(id: number, command: UpdateAppTokenCommand): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Application/AppTokens/{id}/UpdateActions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateAppTokenActions(_response));
        });
    }

    protected processUpdateAppTokenActions(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface IAuthClient {
    getLoginUrl(): Promise<string>;
    checkAuth(): Promise<string>;
    googleLogin(callback?: string | null | undefined): Promise<void>;
    googleCallback(callback?: string | null | undefined): Promise<FileResponse>;
}

export class AuthClient extends ClientBase implements IAuthClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: AuthBase, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getLoginUrl(): Promise<string> {
        let url_ = this.baseUrl + "/api/Auth";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetLoginUrl(_response));
        });
    }

    protected processGetLoginUrl(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    checkAuth(): Promise<string> {
        let url_ = this.baseUrl + "/api/Auth";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCheckAuth(_response));
        });
    }

    protected processCheckAuth(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }

    googleLogin(callback?: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/google?";
        if (callback !== undefined && callback !== null)
            url_ += "callback=" + encodeURIComponent("" + callback) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGoogleLogin(_response));
        });
    }

    protected processGoogleLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    googleCallback(callback?: string | null | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Auth/google-callback?";
        if (callback !== undefined && callback !== null)
            url_ += "callback=" + encodeURIComponent("" + callback) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGoogleCallback(_response));
        });
    }

    protected processGoogleCallback(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface IExampleChildClient {
    createChild(command: CreateExampleChildCommand): Promise<number>;
    getAllChildren(): Promise<ExampleChildIdDto[]>;
    updateChild(id: number, command: UpdateExampleChildCommand): Promise<FileResponse>;
    deleteChild(id: number): Promise<FileResponse>;
}

export class ExampleChildClient extends ClientBase implements IExampleChildClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: AuthBase, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createChild(command: CreateExampleChildCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/ExampleChild";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateChild(_response));
        });
    }

    protected processCreateChild(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    getAllChildren(): Promise<ExampleChildIdDto[]> {
        let url_ = this.baseUrl + "/api/ExampleChild";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAllChildren(_response));
        });
    }

    protected processGetAllChildren(response: Response): Promise<ExampleChildIdDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExampleChildIdDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ExampleChildIdDto[]>(<any>null);
    }

    updateChild(id: number, command: UpdateExampleChildCommand): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/ExampleChild/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateChild(_response));
        });
    }

    protected processUpdateChild(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    deleteChild(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/ExampleChild/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDeleteChild(_response));
        });
    }

    protected processDeleteChild(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface IExampleChildListClient {
    createParent(command: CreateExampleParentCommand): Promise<number>;
}

export class ExampleChildListClient extends ClientBase implements IExampleChildListClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: AuthBase, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createParent(command: CreateExampleParentCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/ExampleChildList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateParent(_response));
        });
    }

    protected processCreateParent(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }
}

export interface IHealthClient {
    getBackendHealth(): Promise<boolean>;
}

export class HealthClient extends ClientBase implements IHealthClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: AuthBase, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBackendHealth(): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Health";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetBackendHealth(_response));
        });
    }

    protected processGetBackendHealth(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IServiceClient {
    createService(command: CreateServiceCommand): Promise<number>;
    getServiceById(id: number): Promise<ServiceIdDto>;
    createAction(id: number, command: CreateActionCommand): Promise<number>;
    getAllServices(): Promise<ServiceIdDto[]>;
    getMyServices(): Promise<ServiceIdDto[]>;
}

export class ServiceClient extends ClientBase implements IServiceClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: AuthBase, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createService(command: CreateServiceCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Service";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateService(_response));
        });
    }

    protected processCreateService(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    getServiceById(id: number): Promise<ServiceIdDto> {
        let url_ = this.baseUrl + "/api/Service/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetServiceById(_response));
        });
    }

    protected processGetServiceById(response: Response): Promise<ServiceIdDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceIdDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceIdDto>(<any>null);
    }

    createAction(id: number, command: CreateActionCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Service/{id}/Actions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateAction(_response));
        });
    }

    protected processCreateAction(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    getAllServices(): Promise<ServiceIdDto[]> {
        let url_ = this.baseUrl + "/api/Service/All";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAllServices(_response));
        });
    }

    protected processGetAllServices(response: Response): Promise<ServiceIdDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ServiceIdDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceIdDto[]>(<any>null);
    }

    getMyServices(): Promise<ServiceIdDto[]> {
        let url_ = this.baseUrl + "/api/Service/MyServices";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetMyServices(_response));
        });
    }

    protected processGetMyServices(response: Response): Promise<ServiceIdDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ServiceIdDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceIdDto[]>(<any>null);
    }
}

export class CreateApplicationCommand implements ICreateApplicationCommand {
    application?: ApplicationDto | null;

    constructor(data?: ICreateApplicationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.application = data.application && !(<any>data.application).toJSON ? new ApplicationDto(data.application) : <ApplicationDto>this.application; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.application = _data["application"] ? ApplicationDto.fromJS(_data["application"]) : <any>null;
        }
    }

    static fromJS(data: any): CreateApplicationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApplicationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application ? this.application.toJSON() : <any>null;
        return data; 
    }
}

export interface ICreateApplicationCommand {
    application?: IApplicationDto | null;
}

export class ApplicationDto implements IApplicationDto {
    title?: string | null;
    description?: string | null;

    constructor(data?: IApplicationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): ApplicationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface IApplicationDto {
    title?: string | null;
    description?: string | null;
}

export class UpdateApplicationCommand implements IUpdateApplicationCommand {
    application?: ApplicationDto | null;

    constructor(data?: IUpdateApplicationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.application = data.application && !(<any>data.application).toJSON ? new ApplicationDto(data.application) : <ApplicationDto>this.application; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.application = _data["application"] ? ApplicationDto.fromJS(_data["application"]) : <any>null;
        }
    }

    static fromJS(data: any): UpdateApplicationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateApplicationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application ? this.application.toJSON() : <any>null;
        return data; 
    }
}

export interface IUpdateApplicationCommand {
    application?: IApplicationDto | null;
}

export class ApplicationIdDto extends ApplicationDto implements IApplicationIdDto {
    id?: number;

    constructor(data?: IApplicationIdDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): ApplicationIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationIdDto extends IApplicationDto {
    id?: number;
}

export class CreateAppTokenCommand implements ICreateAppTokenCommand {

    constructor(data?: ICreateAppTokenCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): CreateAppTokenCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppTokenCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface ICreateAppTokenCommand {
}

export class CreateAppTokenActionsCommand implements ICreateAppTokenActionsCommand {
    appToken?: AppTokenDto | null;

    constructor(data?: ICreateAppTokenActionsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.appToken = data.appToken && !(<any>data.appToken).toJSON ? new AppTokenDto(data.appToken) : <AppTokenDto>this.appToken; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appToken = _data["appToken"] ? AppTokenDto.fromJS(_data["appToken"]) : <any>null;
        }
    }

    static fromJS(data: any): CreateAppTokenActionsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppTokenActionsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appToken"] = this.appToken ? this.appToken.toJSON() : <any>null;
        return data; 
    }
}

export interface ICreateAppTokenActionsCommand {
    appToken?: IAppTokenDto | null;
}

export class AppTokenDto implements IAppTokenDto {
    appTokenActions?: AppTokenActionDto[] | null;

    constructor(data?: IAppTokenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.appTokenActions) {
                this.appTokenActions = [];
                for (let i = 0; i < data.appTokenActions.length; i++) {
                    let item = data.appTokenActions[i];
                    this.appTokenActions[i] = item && !(<any>item).toJSON ? new AppTokenActionDto(item) : <AppTokenActionDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["appTokenActions"])) {
                this.appTokenActions = [] as any;
                for (let item of _data["appTokenActions"])
                    this.appTokenActions!.push(AppTokenActionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AppTokenDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppTokenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.appTokenActions)) {
            data["appTokenActions"] = [];
            for (let item of this.appTokenActions)
                data["appTokenActions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAppTokenDto {
    appTokenActions?: IAppTokenActionDto[] | null;
}

export class AppTokenActionDto implements IAppTokenActionDto {
    actionId?: number;

    constructor(data?: IAppTokenActionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionId = _data["actionId"] !== undefined ? _data["actionId"] : <any>null;
        }
    }

    static fromJS(data: any): AppTokenActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppTokenActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionId"] = this.actionId !== undefined ? this.actionId : <any>null;
        return data; 
    }
}

export interface IAppTokenActionDto {
    actionId?: number;
}

export class AppTokenIdDto extends AppTokenDto implements IAppTokenIdDto {
    id?: number;
    appTokenActions?: AppTokenActionIdDto[] | null;

    constructor(data?: IAppTokenIdDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["appTokenActions"])) {
                this.appTokenActions = [] as any;
                for (let item of _data["appTokenActions"])
                    this.appTokenActions!.push(AppTokenActionIdDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AppTokenIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppTokenIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.appTokenActions)) {
            data["appTokenActions"] = [];
            for (let item of this.appTokenActions)
                data["appTokenActions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAppTokenIdDto extends IAppTokenDto {
    id?: number;
    appTokenActions?: AppTokenActionIdDto[] | null;
}

export class AppTokenActionIdDto extends AppTokenActionDto implements IAppTokenActionIdDto {
    id?: number;
    state?: ServiceStates;
    rejectionReason?: string | null;

    constructor(data?: IAppTokenActionIdDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.rejectionReason = _data["rejectionReason"] !== undefined ? _data["rejectionReason"] : <any>null;
        }
    }

    static fromJS(data: any): AppTokenActionIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppTokenActionIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["rejectionReason"] = this.rejectionReason !== undefined ? this.rejectionReason : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAppTokenActionIdDto extends IAppTokenActionDto {
    id?: number;
    state?: ServiceStates;
    rejectionReason?: string | null;
}

export enum ServiceStates {
    Pending = 0,
    Approved = 1,
    Rejected = 2,
}

export class TokenOutput implements ITokenOutput {
    tokenIdentifier?: string;
    jwt?: string;

    constructor(data?: ITokenOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tokenIdentifier = _data["tokenIdentifier"] !== undefined ? _data["tokenIdentifier"] : <any>null;
            this.jwt = _data["jwt"] !== undefined ? _data["jwt"] : <any>null;
        }
    }

    static fromJS(data: any): TokenOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TokenOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tokenIdentifier"] = this.tokenIdentifier !== undefined ? this.tokenIdentifier : <any>null;
        data["jwt"] = this.jwt !== undefined ? this.jwt : <any>null;
        return data; 
    }
}

export interface ITokenOutput {
    tokenIdentifier?: string;
    jwt?: string;
}

export class CreateAuthAppTokenCommand implements ICreateAuthAppTokenCommand {
    tokenInput?: TokenInput | null;

    constructor(data?: ICreateAuthAppTokenCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.tokenInput = data.tokenInput && !(<any>data.tokenInput).toJSON ? new TokenInput(data.tokenInput) : <TokenInput>this.tokenInput; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tokenInput = _data["tokenInput"] ? TokenInput.fromJS(_data["tokenInput"]) : <any>null;
        }
    }

    static fromJS(data: any): CreateAuthAppTokenCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAuthAppTokenCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tokenInput"] = this.tokenInput ? this.tokenInput.toJSON() : <any>null;
        return data; 
    }
}

export interface ICreateAuthAppTokenCommand {
    tokenInput?: ITokenInput | null;
}

export class TokenInput implements ITokenInput {
    tokenIdentifier?: string;
    services?: Services;

    constructor(data?: ITokenInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.services = data.services && !(<any>data.services).toJSON ? new Services(data.services) : <Services>this.services; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tokenIdentifier = _data["tokenIdentifier"] !== undefined ? _data["tokenIdentifier"] : <any>null;
            this.services = _data["services"] ? Services.fromJS(_data["services"]) : <any>null;
        }
    }

    static fromJS(data: any): TokenInput {
        data = typeof data === 'object' ? data : {};
        let result = new TokenInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tokenIdentifier"] = this.tokenIdentifier !== undefined ? this.tokenIdentifier : <any>null;
        data["services"] = this.services ? this.services.toJSON() : <any>null;
        return data; 
    }
}

export interface ITokenInput {
    tokenIdentifier?: string;
    services?: IServices;
}

export class Services implements IServices {
    aud?: string;
    access?: number[];

    constructor(data?: IServices) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.aud = _data["aud"] !== undefined ? _data["aud"] : <any>null;
            if (Array.isArray(_data["access"])) {
                this.access = [] as any;
                for (let item of _data["access"])
                    this.access!.push(item);
            }
        }
    }

    static fromJS(data: any): Services {
        data = typeof data === 'object' ? data : {};
        let result = new Services();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aud"] = this.aud !== undefined ? this.aud : <any>null;
        if (Array.isArray(this.access)) {
            data["access"] = [];
            for (let item of this.access)
                data["access"].push(item);
        }
        return data; 
    }
}

export interface IServices {
    aud?: string;
    access?: number[];
}

export class UpdateAppTokenCommand implements IUpdateAppTokenCommand {
    appToken?: AppTokenUpdateDto | null;

    constructor(data?: IUpdateAppTokenCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.appToken = data.appToken && !(<any>data.appToken).toJSON ? new AppTokenUpdateDto(data.appToken) : <AppTokenUpdateDto>this.appToken; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appToken = _data["appToken"] ? AppTokenUpdateDto.fromJS(_data["appToken"]) : <any>null;
        }
    }

    static fromJS(data: any): UpdateAppTokenCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppTokenCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appToken"] = this.appToken ? this.appToken.toJSON() : <any>null;
        return data; 
    }
}

export interface IUpdateAppTokenCommand {
    appToken?: IAppTokenUpdateDto | null;
}

export class AppTokenUpdateDto implements IAppTokenUpdateDto {
    appTokenActions?: AppTokenActionUpdateDto[] | null;

    constructor(data?: IAppTokenUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.appTokenActions) {
                this.appTokenActions = [];
                for (let i = 0; i < data.appTokenActions.length; i++) {
                    let item = data.appTokenActions[i];
                    this.appTokenActions[i] = item && !(<any>item).toJSON ? new AppTokenActionUpdateDto(item) : <AppTokenActionUpdateDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["appTokenActions"])) {
                this.appTokenActions = [] as any;
                for (let item of _data["appTokenActions"])
                    this.appTokenActions!.push(AppTokenActionUpdateDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AppTokenUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppTokenUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.appTokenActions)) {
            data["appTokenActions"] = [];
            for (let item of this.appTokenActions)
                data["appTokenActions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAppTokenUpdateDto {
    appTokenActions?: IAppTokenActionUpdateDto[] | null;
}

export class AppTokenActionUpdateDto implements IAppTokenActionUpdateDto {
    state?: ServiceStates;
    rejectionReason?: string | null;

    constructor(data?: IAppTokenActionUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.rejectionReason = _data["rejectionReason"] !== undefined ? _data["rejectionReason"] : <any>null;
        }
    }

    static fromJS(data: any): AppTokenActionUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppTokenActionUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["rejectionReason"] = this.rejectionReason !== undefined ? this.rejectionReason : <any>null;
        return data; 
    }
}

export interface IAppTokenActionUpdateDto {
    state?: ServiceStates;
    rejectionReason?: string | null;
}

export class CreateExampleChildCommand implements ICreateExampleChildCommand {
    child?: ExampleChildDto | null;

    constructor(data?: ICreateExampleChildCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.child = data.child && !(<any>data.child).toJSON ? new ExampleChildDto(data.child) : <ExampleChildDto>this.child; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.child = _data["child"] ? ExampleChildDto.fromJS(_data["child"]) : <any>null;
        }
    }

    static fromJS(data: any): CreateExampleChildCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExampleChildCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["child"] = this.child ? this.child.toJSON() : <any>null;
        return data; 
    }
}

export interface ICreateExampleChildCommand {
    child?: IExampleChildDto | null;
}

export class ExampleChildDto implements IExampleChildDto {
    name?: string | null;
    type?: ExampleEnum;
    parentId?: number;

    constructor(data?: IExampleChildDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.parentId = _data["parentId"] !== undefined ? _data["parentId"] : <any>null;
        }
    }

    static fromJS(data: any): ExampleChildDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExampleChildDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        return data; 
    }
}

export interface IExampleChildDto {
    name?: string | null;
    type?: ExampleEnum;
    parentId?: number;
}

export enum ExampleEnum {
    Youngest = 0,
    Middle = 1,
    Oldest = 2,
}

export class UpdateExampleChildCommand implements IUpdateExampleChildCommand {
    child?: ExampleChildDto | null;

    constructor(data?: IUpdateExampleChildCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.child = data.child && !(<any>data.child).toJSON ? new ExampleChildDto(data.child) : <ExampleChildDto>this.child; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.child = _data["child"] ? ExampleChildDto.fromJS(_data["child"]) : <any>null;
        }
    }

    static fromJS(data: any): UpdateExampleChildCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateExampleChildCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["child"] = this.child ? this.child.toJSON() : <any>null;
        return data; 
    }
}

export interface IUpdateExampleChildCommand {
    child?: IExampleChildDto | null;
}

export class ExampleChildIdDto extends ExampleChildDto implements IExampleChildIdDto {
    id?: number;

    constructor(data?: IExampleChildIdDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): ExampleChildIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExampleChildIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IExampleChildIdDto extends IExampleChildDto {
    id?: number;
}

export class CreateExampleParentCommand implements ICreateExampleParentCommand {
    parent?: ExampleParentDto | null;

    constructor(data?: ICreateExampleParentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.parent = data.parent && !(<any>data.parent).toJSON ? new ExampleParentDto(data.parent) : <ExampleParentDto>this.parent; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parent = _data["parent"] ? ExampleParentDto.fromJS(_data["parent"]) : <any>null;
        }
    }

    static fromJS(data: any): CreateExampleParentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExampleParentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parent"] = this.parent ? this.parent.toJSON() : <any>null;
        return data; 
    }
}

export interface ICreateExampleParentCommand {
    parent?: IExampleParentDto | null;
}

export class ExampleParentDto implements IExampleParentDto {
    name?: string | null;

    constructor(data?: IExampleParentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): ExampleParentDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExampleParentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IExampleParentDto {
    name?: string | null;
}

export class CreateServiceCommand implements ICreateServiceCommand {
    service?: ServiceDto | null;

    constructor(data?: ICreateServiceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.service = data.service && !(<any>data.service).toJSON ? new ServiceDto(data.service) : <ServiceDto>this.service; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.service = _data["service"] ? ServiceDto.fromJS(_data["service"]) : <any>null;
        }
    }

    static fromJS(data: any): CreateServiceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateServiceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["service"] = this.service ? this.service.toJSON() : <any>null;
        return data; 
    }
}

export interface ICreateServiceCommand {
    service?: IServiceDto | null;
}

export class ServiceDto implements IServiceDto {
    title?: string | null;
    description?: string | null;
    state?: ServiceStates;

    constructor(data?: IServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
        }
    }

    static fromJS(data: any): ServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        return data; 
    }
}

export interface IServiceDto {
    title?: string | null;
    description?: string | null;
    state?: ServiceStates;
}

export class ServiceIdDto extends ServiceDto implements IServiceIdDto {
    id?: number;
    actions?: ActionIdDto[] | null;

    constructor(data?: IServiceIdDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(ActionIdDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ServiceIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IServiceIdDto extends IServiceDto {
    id?: number;
    actions?: ActionIdDto[] | null;
}

export class ActionDto implements IActionDto {
    title?: string | null;
    description?: string | null;
    adminNote?: string | null;

    constructor(data?: IActionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.adminNote = _data["adminNote"] !== undefined ? _data["adminNote"] : <any>null;
        }
    }

    static fromJS(data: any): ActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["adminNote"] = this.adminNote !== undefined ? this.adminNote : <any>null;
        return data; 
    }
}

export interface IActionDto {
    title?: string | null;
    description?: string | null;
    adminNote?: string | null;
}

export class ActionIdDto extends ActionDto implements IActionIdDto {
    id?: number;

    constructor(data?: IActionIdDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): ActionIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new ActionIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IActionIdDto extends IActionDto {
    id?: number;
}

export class CreateActionCommand implements ICreateActionCommand {
    action?: ActionDto | null;

    constructor(data?: ICreateActionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.action = data.action && !(<any>data.action).toJSON ? new ActionDto(data.action) : <ActionDto>this.action; 
        }
    }

    init(_data?: any) {
        if (_data) {
            this.action = _data["action"] ? ActionDto.fromJS(_data["action"]) : <any>null;
        }
    }

    static fromJS(data: any): CreateActionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateActionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["action"] = this.action ? this.action.toJSON() : <any>null;
        return data; 
    }
}

export interface ICreateActionCommand {
    action?: IActionDto | null;
}

export enum CommandErrorCode {
    AbstractComparisonValidator = 0,
    AsyncPredicateValidator = 1,
    AsyncValidatorBase = 2,
    ChildValidatorAdaptor = 3,
    CreditCardValidator = 4,
    CustomValidator = 5,
    EmailValidator = 6,
    EmptyValidator = 7,
    EnumValidator = 8,
    EqualValidator = 9,
    ExclusiveBetweenValidator = 10,
    GreaterThanOrEqualValidator = 11,
    GreaterThanValidator = 12,
    IPropertyValidator = 13,
    InclusiveBetweenValidator = 14,
    LengthValidator = 15,
    LessThanOrEqualValidator = 16,
    LessThanValidator = 17,
    NoopPropertyValidator = 18,
    NotEmptyValidator = 19,
    NotEqualValidator = 20,
    NotNullValidator = 21,
    NullValidator = 22,
    OnFailureValidator = 23,
    PolymorphicValidator = 24,
    PredicateValidator = 25,
    PropertyValidator = 26,
    PropertyValidatorContext = 27,
    RegularExpressionValidator = 28,
    ScalePrecisionValidator = 29,
    StringEnumValidator = 30,
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

/* istanbul ignore file */